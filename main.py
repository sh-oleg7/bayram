import asyncio
import logging
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message, ReplyKeyboardRemove

from database import create_user, create
from database import create_new_record



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

router = Router()

# –°–ª–æ–≤–∞—Ä–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
texts = {
    'ru': {
        'language_prompt': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'name_prompt': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        'phone_prompt': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'birthday_prompt': "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è:",
        'phone_request': "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        'thanks_phone': "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}",
        'finish': "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: ",
        'birthday_format': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-01-2000):",
        'all_holidays': "üéâ –í—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏",
        'month': "üìÖ –ú–µ—Å—è—Ü",
        'add': "‚ûï –î–æ–±–∞–≤–∏—Ç—å",
        'delete': "‚ùå –£–¥–∞–ª–∏—Ç—å",
        'congratulations': "üéÜ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
        'settings': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        'holidays_in_month': "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:",  # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –º–µ—Å—è—Ü–∞
    },
    'uz': {
        'language_prompt': "Tilni tanlang:",
        'name_prompt': "Ismingizni kiriting:",
        'phone_prompt': "Telefon raqamingizni kiriting:",
        'birthday_prompt': "Tug'ilgan sanangizni kiriting:",
        'phone_request': "Telefon raqamingizni ulashing",
        'thanks_phone': "Telefon raqamingiz uchun rahmat: {}",
        'finish': "Ro'yxatdan o'tish yakunlandi. Ma'lumotlaringiz: ",
        'birthday_format': "Tug'ilgan sanangizni DD-MM-YYYY formatida kiriting (masalan, 25-01-2000):",
        'all_holidays': "üéâ Barcha bayramlar",
        'month': "üìÖ Oyning bayramlari",
        'add': "‚ûï Qo'shish",
        'delete': "‚ùå O'chirish",
        'congratulations': "üéÜ  Tabriklar",
        'settings': "‚öôÔ∏è Sozlamalar",  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        'holidays_in_month': "Ushbu oydagi bayramlar:",  # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –º–µ—Å—è—Ü–∞
    }
}

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –¥–ª—è –≤—Å–µ—Ö 12 –º–µ—Å—è—Ü–µ–≤
holidays_by_month = {
    'ru': {
        '‚ùÑÔ∏è –Ø–Ω–≤–∞—Ä—å': ['–ù–æ–≤—ã–π –≥–æ–¥ (1 —è–Ω–≤–∞—Ä—è)', '–†–æ–∂–¥–µ—Å—Ç–≤–æ (7 —è–Ω–≤–∞—Ä—è)'],
        '‚ùÑÔ∏è –§–µ–≤—Ä–∞–ª—å': ['–î–µ–Ω—å –≤—Å–µ—Ö –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö (14 —Ñ–µ–≤—Ä–∞–ª—è)'],
        'üå∏ –ú–∞—Ä—Ç': ['–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å (8 –º–∞—Ä—Ç–∞)'],
        'üå∏ –ê–ø—Ä–µ–ª—å': ['–î–µ–Ω—å —Ç—Ä—É–¥–∞ (1 –º–∞—è)'],
        'üå∏ –ú–∞–π': ['–ü–æ–±–µ–¥–∞ –≤ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω–µ (9 –º–∞—è)', '–î–µ–Ω—å –†–æ—Å—Å–∏–∏ (12 –∏—é–Ω—è)'],
        'üèñÔ∏è –ò—é–Ω—å': ['–î–µ–Ω—å –º–æ–ª–æ–¥–µ–∂–∏ (27 –∏—é–Ω—è)'],
        'üèñÔ∏è –ò—é–ª—å': ['–î–µ–Ω—å –º–µ—Ç–∞–ª–ª—É—Ä–≥–∞ (15 –∏—é–ª—è)'],
        'üèñÔ∏è –ê–≤–≥—É—Å—Ç': ['–î–µ–Ω—å –í–î–í (2 –∞–≤–≥—É—Å—Ç–∞)'],
        'üçÅ –°–µ–Ω—Ç—è–±—Ä—å': ['–î–µ–Ω—å –∑–Ω–∞–Ω–∏–π (1 —Å–µ–Ω—Ç—è–±—Ä—è)'],
        'üçÅ –û–∫—Ç—è–±—Ä—å': ['–î–µ–Ω—å —É—á–∏—Ç–µ–ª—è (5 –æ–∫—Ç—è–±—Ä—è)'],
        'üçÅ –ù–æ—è–±—Ä—å': ['–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞ (4 –Ω–æ—è–±—Ä—è)'],
        '‚ùÑÔ∏è –î–µ–∫–∞–±—Ä—å': ['–ù–æ–≤—ã–π –≥–æ–¥ (31 –¥–µ–∫–∞–±—Ä—è)'],
    },
    'uz': {
        '‚ùÑÔ∏è January': ['Yangi yil (1 yanvar)', 'Rojdestvo (7 yanvar)'],
        '‚ùÑÔ∏è February': ['Sevishganlar kuni (14 fevral)'],
        'üå∏ March': ['Xalqaro ayollar kuni (8 mart)'],
        'üå∏ April': ['Mehnat bayrami (1 may)'],
        'üå∏ May': ['Haqiqiy mustaqillik bayrami (9 may)', 'Rossiya kuni (12 iyun)'],
        'üèñÔ∏è June': ['Yoshlar kuni (27 iyun)'],
        'üèñÔ∏è July': ['Metallurglar kuni (15 iyul)'],
        'üèñÔ∏è August': ['VDV kuni (2 avgust)'],
        'üçÅ September': ['Bilimlar kuni (1 sentyabr)'],
        'üçÅ October': ['O\'qituvchilar kuni (5 oktabr)'],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        'üçÅ November': ['Xalqaro birlik kuni (4 noyabr)'],
        '‚ùÑÔ∏è December': ['Yangi yil (31 dekabr)'],
    }
}


# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)
def validate_name(name):
    if re.match("^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+$", name):
        return True
    return False


# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def validate_phone_number(phone_number):
    pattern = r'^\+998[0-9]{9}$'
    if re.match(pattern, phone_number):
        return True
    return False


# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def validate_birthdate(birthdate_str):
    try:
        birthdate = datetime.strptime(birthdate_str, "%d-%m-%Y")
        return True, "–î–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–Ω—å-–º–µ—Å—è—Ü-–≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-01-2000)."


class RegisterUser(StatesGroup):
    language = State()
    name = State()
    phone = State()
    birthday = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    kb = [
        [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫")],  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
        [types.KeyboardButton(text="üá∫üáø O'zbek tili")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(texts['ru']['language_prompt'], reply_markup=keyboard)
    await state.set_state(RegisterUser.language)


@router.message(RegisterUser.language)
async def register_name(message: types.Message, state: FSMContext):
    user_lang = 'ru' if "üá∑üá∫" in message.text else 'uz'
    await state.update_data(language=user_lang)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫

    await message.answer(texts[user_lang]['name_prompt'], reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RegisterUser.name)


@router.message(RegisterUser.name)
async def register_name(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    name = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤
    if not validate_name(name):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —Å–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(name=name)

    contact_button = KeyboardButton(text=texts[user_lang]['phone_request'], request_contact=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[contact_button]], resize_keyboard=True)

    await message.answer(texts[user_lang]['phone_prompt'], reply_markup=keyboard)
    await state.set_state(RegisterUser.phone)


@router.message(RegisterUser.phone)
async def handle_contact(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç
    if message.contact:
        phone_number = message.contact.phone_number
        phone_number = phone_number.replace("+", "")
        phone_number = "+" + phone_number
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é
        phone_number = message.text
    print(phone_number)
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é, –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
    if not validate_phone_number(phone_number):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998XXXXXXXXX.")
        return

    await state.update_data(phone=phone_number)

    await message.answer(texts[user_lang]['thanks_phone'].format(phone_number), reply_markup=ReplyKeyboardRemove())

    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—ã
    await message.answer(texts[user_lang]['birthday_format'])
    await state.set_state(RegisterUser.birthday)


@router.message(RegisterUser.birthday)
async def register_birthday(message: types.Message, state: FSMContext):
    birthdate_str = message.text
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    valid, message_text = validate_birthdate(birthdate_str)
    if not valid:
        await message.answer(message_text)
        return

    await state.update_data(birthday=birthdate_str)

    data = await state.get_data()

    finish_message = f"{texts[user_lang]['finish']}\n" + \
                     f"–ò–º—è: {data['name']}\n" + \
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n" + \
                     f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birthday']}"

    create_user(data['name'], data['phone'], message.from_user.id, data['birthday'])

    await message.answer(finish_message, reply_markup=ReplyKeyboardRemove())

    # –ö–Ω–æ–ø–∫–∏, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    kb = [
        [KeyboardButton(text=texts[user_lang]['all_holidays']), KeyboardButton(text=texts[user_lang]['month'])],
        [KeyboardButton(text=texts[user_lang]['add']), KeyboardButton(text=texts[user_lang]['delete'])],
        [KeyboardButton(text=texts[user_lang]['congratulations']), KeyboardButton(text=texts[user_lang]['settings'])]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


class HolidayState(StatesGroup):
    month = State()
    add_holiday = State()
    add_holiday_date = State()

@router.message(lambda message: message.text == "üéâ –í—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏")
async def handle_all_holidays(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    # –†–∞–∑–¥–µ–ª–∏–º –º–µ—Å—è—Ü—ã –Ω–∞ 3 –≥—Ä—É–ø–ø—ã –ø–æ 4 –º–µ—Å—è—Ü–∞
    months = list(holidays_by_month[user_lang].keys())
    months_grouped = [months[i:i + 3] for i in range(0, len(months), 3)]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 3 —Ä—è–¥–∞–º–∏ (–ø–æ 4 –º–µ—Å—è—Ü–∞)
    months_buttons = [
        [KeyboardButton(text=month) for month in group] for group in months_grouped
    ]
    months_buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

    keyboard = ReplyKeyboardMarkup(keyboard=months_buttons, resize_keyboard=True)

    await message.answer(texts[user_lang]['all_holidays'], reply_markup=keyboard)
    await state.set_state(HolidayState.month)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞


@router.message(lambda message: message.text == "üìÖ –ú–µ—Å—è—Ü")
async def this_month(message: types.Message, state: FSMContext):
    import datetime

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Å—è—Ü–∞–º–∏
    months_dict = {
        1: '–Ø–Ω–≤–∞—Ä—å',
        2: '–§–µ–≤—Ä–∞–ª—å',
        3: '–ú–∞—Ä—Ç',
        4: '–ê–ø—Ä–µ–ª—å',
        5: '–ú–∞–π',
        6: '–ò—é–Ω—å',
        7: '–ò—é–ª—å',
        8: '–ê–≤–≥—É—Å—Ç',
        9: '–°–µ–Ω—Ç—è–±—Ä—å',
        10: '–û–∫—Ç—è–±—Ä—å',
        11: '–ù–æ—è–±—Ä—å',
        12: '–î–µ–∫–∞–±—Ä—å'
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month_number = datetime.datetime.now().month

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å
    current_month_name = months_dict[current_month_number]

    await message.answer(f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {current_month_name}")


@router.message(
    lambda message: message.text in holidays_by_month['ru'].keys() or message.text in holidays_by_month['uz'].keys())
async def holidays_in_month(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    month_name = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    holidays = holidays_by_month[user_lang].get(month_name, [])

    if holidays:
        holidays_text = '\n'.join(holidays)
    else:
        holidays_text = "–ù–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏
    await message.answer(f"{texts[user_lang]['holidays_in_month']} {month_name}:\n{holidays_text}")


@router.message(HolidayState.month)
async def holiday_handler(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == "–ù–∞–∑–∞–¥":
        user_data = await state.get_data()
        user_lang = user_data.get('language', 'ru')

        kb = [
            [KeyboardButton(text=texts[user_lang]['all_holidays']), KeyboardButton(text=texts[user_lang]['month'])],
            [KeyboardButton(text=texts[user_lang]['add']), KeyboardButton(text=texts[user_lang]['delete'])],
            [KeyboardButton(text=texts[user_lang]['congratulations']),
             KeyboardButton(text=texts[user_lang]['settings'])]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)



@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def add_holiday(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    # –ó–∞–ø—Ä–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞:")
    await state.set_state(HolidayState.add_holiday)

@router.message(HolidayState.add_holiday)
async def get_holiday_name(message: types.Message, state: FSMContext):
    holiday_name = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    await state.update_data(holiday_name=holiday_name)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY:")
    await state.set_state(HolidayState.add_holiday_date)


@router.message(HolidayState.add_holiday_date)
async def get_holiday_date(message: types.Message, state: FSMContext):
    holiday_date_str = message.text
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')
    holiday_name = user_data.get('holiday_name')
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    valid, message_text = validate_birthdate(holiday_date_str)
    if not valid:
        await message.answer(message_text)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    await state.update_data(holiday_date=holiday_date_str)

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ
    await message.answer(f"–ü—Ä–∞–∑–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: {holiday_name}\n"
                         f"–î–∞—Ç–∞: {holiday_date_str}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é create() –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
    create(holiday_name, holiday_date_str, user_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = [
        [KeyboardButton(text=texts[user_lang]['all_holidays']), KeyboardButton(text=texts[user_lang]['month'])],
        [KeyboardButton(text=texts[user_lang]['add']), KeyboardButton(text=texts[user_lang]['delete'])],
        [KeyboardButton(text=texts[user_lang]['congratulations']), KeyboardButton(text=texts[user_lang]['settings'])]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)




# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    bot = Bot(token="8081320278:AAENVMKnl4hWbNo7XtEULq07NQuwHVPtIVE")
    dp = Dispatcher()
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

