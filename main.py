import asyncio
import logging
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message, ReplyKeyboardRemove

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

router = Router()

# –°–ª–æ–≤–∞—Ä–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
texts = {
    'ru': {
        'language_prompt': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'name_prompt': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        'phone_prompt': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'birthday_prompt': "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è:",
        'phone_request': "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        'thanks_phone': "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}",
        'finish': "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: ",
        'birthday_format': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-01-2000):",
        'all_holidays': "üéâ –í—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏",
        'month': "üìÖ –ú–µ—Å—è—Ü",
        'add': "‚ûï –î–æ–±–∞–≤–∏—Ç—å",
        'delete': "‚ùå –£–¥–∞–ª–∏—Ç—å",
        'congratulations': "üéÜ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
        'settings': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    },
    'uz': {
        'language_prompt': "Tilni tanlang:",
        'name_prompt': "Ismingizni kiriting:",
        'phone_prompt': "Telefon raqamingizni kiriting:",
        'birthday_prompt': "Tug'ilgan sanangizni kiriting:",
        'phone_request': "Telefon raqamingizni ulashing",
        'thanks_phone': "Telefon raqamingiz uchun rahmat: {}",
        'finish': "Ro'yxatdan o'tish yakunlandi. Ma'lumotlaringiz: ",
        'birthday_format': "Tug'ilgan sanangizni DD-MM-YYYY formatida kiriting (masalan, 25-01-2000):",
        'all_holidays': "üéâ Barcha bayramlar",
        'month': "üìÖ Oyning bayramlari",
        'add': "‚ûï Qo'shish",
        'delete': "‚ùå O'chirish",
        'congratulations': "üéÜ  Tabriklar",
        'settings': "‚öôÔ∏è Sozlamalar"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    }
}


# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)
def validate_name(name):
    if re.match("^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+$", name):
        return True
    return False


# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def validate_phone_number(phone_number):
    pattern = r'^\+998[0-9]{9}$'
    if re.match(pattern, phone_number):
        return True
    return False


# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def validate_birthdate(birthdate_str):
    try:
        birthdate = datetime.strptime(birthdate_str, "%d-%m-%Y")
        return True, "–î–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–Ω—å-–º–µ—Å—è—Ü-–≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-01-2000)."


class RegisterUser(StatesGroup):
    language = State()
    name = State()
    phone = State()
    birthday = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    kb = [
        [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫")],
        [types.KeyboardButton(text="üá∫üáø O'zbek tili")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
    await message.answer(texts['ru']['language_prompt'], reply_markup=keyboard)
    await state.set_state(RegisterUser.language)


@router.message(RegisterUser.language)
async def register_name(message: types.Message, state: FSMContext):
    user_lang = 'ru' if "–†—É—Å—Å–∫–∏–π" in message.text else 'uz'
    await state.update_data(language=user_lang)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫

    await message.answer(texts[user_lang]['name_prompt'], reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RegisterUser.name)


@router.message(RegisterUser.name)
async def register_name(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    name = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤
    if not validate_name(name):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —Å–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(name=name)

    contact_button = KeyboardButton(text=texts[user_lang]['phone_request'], request_contact=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[contact_button]], resize_keyboard=True)

    await message.answer(texts[user_lang]['phone_prompt'], reply_markup=keyboard)
    await state.set_state(RegisterUser.phone)


@router.message(RegisterUser.phone)
async def handle_contact(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç
    if message.contact:
        phone_number = message.contact.phone_number
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é
        phone_number = message.text

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é, –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
    if not validate_phone_number(phone_number):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998XXXXXXXXX.")
        return

    await state.update_data(phone=phone_number)

    await message.answer(texts[user_lang]['thanks_phone'].format(phone_number), reply_markup=ReplyKeyboardRemove())

    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—ã
    await message.answer(texts[user_lang]['birthday_format'])
    await state.set_state(RegisterUser.birthday)


@router.message(RegisterUser.birthday)
async def register_birthday(message: types.Message, state: FSMContext):
    birthdate_str = message.text
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    valid, message_text = validate_birthdate(birthdate_str)
    if not valid:
        await message.answer(message_text)
        return

    await state.update_data(birthday=birthdate_str)

    data = await state.get_data()

    finish_message = f"{texts[user_lang]['finish']}\n" + \
                     f"–ò–º—è: {data['name']}\n" + \
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n" + \
                     f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birthday']}"

    await message.answer(finish_message, reply_markup=ReplyKeyboardRemove())

    # –ö–Ω–æ–ø–∫–∏, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    kb = [
        [KeyboardButton(text=texts[user_lang]['all_holidays']), KeyboardButton(text=texts[user_lang]['month'])],
        [KeyboardButton(text=texts[user_lang]['add']), KeyboardButton(text=texts[user_lang]['delete'])],
        [KeyboardButton(text=texts[user_lang]['congratulations'])],
        [KeyboardButton(text=texts[user_lang]['settings'])]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    print('test')
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.message(lambda message: message.text == "üéâ –í—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏")
async def handle_settings(message: types.Message, state: FSMContext):
    await message.answer("test message in all holidays")
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    if message.text == texts[user_lang]['settings']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        settings_message = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:\n"
        settings_message += "1. –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
        settings_message += "2. –ò–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.)"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        kb = [
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

        await message.answer(settings_message, reply_markup=keyboard)


@router.message(RegisterUser.language)
async def change_language(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_lang = user_data.get('language', 'ru')

    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫":
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
        kb = [
            [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫")],
            [types.KeyboardButton(text="üá∫üáø O'zbek tili")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
        await message.answer(texts[user_lang]['language_prompt'], reply_markup=keyboard)
        await state.set_state(RegisterUser.language)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    bot = Bot(token="8081320278:AAENVMKnl4hWbNo7XtEULq07NQuwHVPtIVE")  # –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    dp = Dispatcher()
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
